<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.prodyna.pac.conference</groupId>
	<artifactId>conference-parent</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>pom</packaging>
	<modules>
		<module>arquillian-suite-extension</module>
		<module>conference-common-api</module>
		<module>conference-common-ejb</module>
		<module>conference-facility-api</module>
		<module>conference-facility-ejb</module>
		<module>conference-users-api</module>
		<module>conference-users-ejb</module>
		<module>conference-events-api</module>
		<module>conference-events-ejb</module>
		<module>conference-web</module>
		<module>conference-app</module>
		<module>conference-ws</module>
		<module>conference-dist</module>
	</modules>

	<properties>
		<!-- Explicitly declaring the source encoding eliminates the following 
			message: -->
		<!-- [WARNING] Using platform encoding (UTF-8 actually) to copy filtered 
			resources, i.e. build is platform dependent! -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<!-- JBoss dependency versions -->

		<version.jboss.maven.plugin>7.4.Final</version.jboss.maven.plugin>

		<!-- Define the version of the JBoss BOMs we want to import to specify 
			tested stacks. -->
		<version.jboss.bom>1.0.7.Final</version.jboss.bom>
		<!-- Alternatively, comment out the above line, and un-comment the line 
			below to use version 1.0.2.Final-redhat-1 which is a release certified to 
			work with JBoss EAP 6. It requires you have access to the JBoss EAP 6 maven 
			repository. -->
		<!-- <version.jboss.bom>1.0.2.Final-redhat-1</version.jboss.bom>> -->
        <org.richfaces.bom.version>4.2.3.Final</org.richfaces.bom.version>

		<version.jboss.as>7.2.0.Final</version.jboss.as>
		<!-- Alternatively, comment out the above line, and un-comment the line 
			below to use version 7.2.0.Final-redhat-1 which is a release certified to 
			work with JBoss EAP 6. It requires you have access to the JBoss EAP 6 maven 
			repository. -->
		<!-- <version.jboss.as>7.2.0.Final-redhat-1</version.jboss.as> -->

		<!-- other plugin versions -->
		<version.compiler.plugin>2.3.1</version.compiler.plugin>
		<version.ear.plugin>2.6</version.ear.plugin>
		<version.ejb.plugin>2.3</version.ejb.plugin>
		<version.surefire.plugin>2.4.3</version.surefire.plugin>
		<version.war.plugin>2.1.1</version.war.plugin>
		<version.source.plugin>2.1.2</version.source.plugin>
		<version.javadoc.plugin>2.9.1</version.javadoc.plugin>

		<!-- maven-compiler-plugin -->
		<maven.compiler.target>1.6</maven.compiler.target>
		<maven.compiler.source>1.6</maven.compiler.source>
		<version.arquillian.persistence>1.0.0.Alpha6</version.arquillian.persistence>
		<version.arquillian.rest-warp>1.0.0.Alpha1</version.arquillian.rest-warp>
		<version.arquillian.suite>1.0.1-SNAPSHOT</version.arquillian.suite>
		<version.jackson-mapper-asl>1.9.2</version.jackson-mapper-asl>
		<version.jaxb-api>2.2</version.jaxb-api>
	</properties>

	<dependencyManagement>
		<dependencies>

			<!-- Define the version of the EJB jar so that we don't need to repeat 
				ourselves in every module -->
			<dependency>
				<groupId>com.prodyna.pac.conference</groupId>
				<artifactId>conference-common-api</artifactId>
				<version>${project.version}</version>
				<type>jar</type>
			</dependency>

			<dependency>
				<groupId>com.prodyna.pac.conference</groupId>
				<artifactId>conference-common-ejb</artifactId>
				<version>${project.version}</version>
				<type>ejb</type>
			</dependency>

			<dependency>
				<groupId>com.prodyna.pac.conference</groupId>
				<artifactId>conference-events-api</artifactId>
				<version>${project.version}</version>
				<type>jar</type>
			</dependency>

			<dependency>
				<groupId>com.prodyna.pac.conference</groupId>
				<artifactId>conference-events-ejb</artifactId>
				<version>${project.version}</version>
				<type>ejb</type>
			</dependency>

			<dependency>
				<groupId>com.prodyna.pac.conference</groupId>
				<artifactId>conference-facility-api</artifactId>
				<version>${project.version}</version>
				<type>jar</type>
			</dependency>

			<dependency>
				<groupId>com.prodyna.pac.conference</groupId>
				<artifactId>conference-facility-ejb</artifactId>
				<version>${project.version}</version>
				<type>ejb</type>
			</dependency>

			<dependency>
				<groupId>com.prodyna.pac.conference</groupId>
				<artifactId>conference-users-api</artifactId>
				<version>${project.version}</version>
				<type>jar</type>
			</dependency>

			<dependency>
				<groupId>com.prodyna.pac.conference</groupId>
				<artifactId>conference-users-ejb</artifactId>
				<version>${project.version}</version>
				<type>ejb</type>
			</dependency>

			<!-- Define the version of the WAR so that we don't need to repeat ourselves 
				in every module -->
			<dependency>
				<groupId>com.prodyna.pac.conference</groupId>
				<artifactId>conference-web</artifactId>
				<version>${project.version}</version>
				<type>war</type>
			</dependency>
			<dependency>
				<groupId>com.prodyna.pac.conference</groupId>
				<artifactId>conference-ws</artifactId>
				<version>${project.version}</version>
				<type>war</type>
			</dependency>

			<dependency>
				<groupId>com.prodyna.pac.conference</groupId>
				<artifactId>conference-app</artifactId>
				<version>${project.version}</version>
				<type>ear</type>
			</dependency>

			<!-- JBoss distributes a complete set of Java EE 6 APIs including a Bill 
				of Materials (BOM). A BOM specifies the versions of a "stack" (or a collection) 
				of artifacts. We use this here so that we always get the correct versions 
				of artifacts. Here we use the jboss-javaee-6.0-with-tools stack (you can 
				read this as the JBoss stack of the Java EE 6 APIs, with some extras tools 
				for your project, such as Arquillian for testing) and the jboss-javaee-6.0-with-hibernate 
				stack you can read this as the JBoss stack of the Java EE 6 APIs, with extras 
				from the Hibernate family of projects) -->
			<dependency>
				<groupId>org.jboss.bom</groupId>
				<artifactId>jboss-javaee-6.0-with-tools</artifactId>
				<version>${version.jboss.bom}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<dependency>
				<groupId>org.jboss.bom</groupId>
				<artifactId>jboss-javaee-6.0-with-hibernate</artifactId>
				<version>${version.jboss.bom}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			
            <dependency>
                <groupId>org.richfaces</groupId>
                <artifactId>richfaces-bom</artifactId>
                <version>${org.richfaces.bom.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
	
			

			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-api</artifactId>
				<version>1.6.4</version>
				<scope>provided</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<pluginManagement>
			<plugins>
				<!-- Compiler plugin enforces Java 1.6 compatibility and activates annotation 
					processors -->
				<plugin>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>${version.compiler.plugin}</version>
					<configuration>
						<source>${maven.compiler.source}</source>
						<target>${maven.compiler.target}</target>
					</configuration>
				</plugin>
				<!-- The JBoss AS plugin deploys your ear to a local JBoss AS container -->
				<!-- Due to Maven's lack of intelligence with EARs we need to configure 
					the jboss-as maven plugin to skip deployment for all modules. We then enable 
					it specifically in the ear module. -->
				<plugin>
					<groupId>org.jboss.as.plugins</groupId>
					<artifactId>jboss-as-maven-plugin</artifactId>
					<version>${version.jboss.maven.plugin}</version>
					<inherited>true</inherited>
					<configuration>
						<skip>true</skip>
					</configuration>
				</plugin>
				<plugin>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>2.4</version>
					<executions>
						<execution>
							<id>create-project-bundle</id>
							<phase>package</phase>
							<goals>
								<goal>single</goal>
							</goals>
							<configuration>
								<descriptorRefs>
									<descriptorRef>project</descriptorRef>
								</descriptorRefs>
							</configuration>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<profiles>
		<profile>
			<!-- The default profile skips all tests, though you can tune it to run 
				just unit tests based on a custom pattern -->
			<!-- Seperate profiles are provided for running all tests, including Arquillian 
				tests that execute in the specified container -->
			<id>default</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>${version.surefire.plugin}</version>
						<configuration>
							<skip>true</skip>
						</configuration>
					</plugin>
					<plugin>
						<artifactId>maven-source-plugin</artifactId>
						<version>${version.source.plugin}</version>
						<executions>
							<execution>
								<id>bundle-sources</id>
								<phase>package</phase>
								<goals>
									<!-- produce source artifact for main project sources -->
									<goal>jar-no-fork</goal>

									<!-- produce source artifact for project test sources -->
									<goal>test-jar-no-fork</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

					<plugin>
						<artifactId>maven-javadoc-plugin</artifactId>
						<version>${version.javadoc.plugin}</version>
						<executions>
							<execution>
								<id>javadoc-jar</id>
								<phase>package</phase>
								<goals>
									<goal>jar</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- An optional Arquillian testing profile that executes tests in your 
				JBoss AS instance -->
			<!-- This profile will start a new JBoss AS instance, and execute the 
				test, shutting it down when done -->
			<!-- Run with: mvn clean test -Parq-jbossas-managed -->
			<id>arq-jbossas-managed</id>
			<dependencies>
				<dependency>
					<groupId>org.jboss.as</groupId>
					<artifactId>jboss-as-arquillian-container-managed</artifactId>
					<scope>test</scope>
				</dependency>
			</dependencies>
		</profile>

		<profile>
			<!-- An optional Arquillian testing profile that executes tests in a remote 
				JBoss AS instance -->
			<!-- Run with: mvn clean test -Parq-jbossas-remote -->
			<id>arq-jbossas-remote</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<dependencies>
				<dependency>
					<groupId>org.jboss.as</groupId>
					<artifactId>jboss-as-arquillian-container-remote</artifactId>
					<scope>test</scope>
				</dependency>
			</dependencies>
		</profile>

		<profile>
			<!-- When built in OpenShift the 'openshift' profile will be used when 
				invoking mvn. -->
			<!-- Use this profile for any OpenShift specific customization your app 
				will need. -->
			<!-- By default that is to put the resulting archive into the 'deployments' 
				folder. -->
			<!-- http://maven.apache.org/guides/mini/guide-building-for-different-environments.html -->
			<id>openshift</id>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-war-plugin</artifactId>
						<version>${version.war.plugin}</version>
						<configuration>
							<outputDirectory>deployments</outputDirectory>
							<warName>ROOT</warName>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

	</profiles>
	<scm>
		<developerConnection>scm:git:ssh://cbrien@github.com:cbrien/conference-planning-app.git</developerConnection>
		<url>https://github.com/cbrien/conference-planning-app.git</url>
	</scm>

</project>